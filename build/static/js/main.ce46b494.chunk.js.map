{"version":3,"sources":["actions/types.js","constants/defaultValues.js","actions/alert.js","utils/setAuthToken.js","actions/auth.js","index.js","serviceWorker.js","redux/reducers/alert.js","redux/reducers/auth.js","redux/reducers/index.js","redux/store.js","layout/useEffectHook.js","AppRenderer.js"],"names":["SET_ALERT","REMOVE_ALERT","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","menuHiddenBreakpoint","searchPath","themeColorStorageKey","isMultiColorActive","isDarkSwitchActive","defaultColor","defaultDirection","setAlert","msg","alertType","dispatch","id","uuidv4","type","payload","toast","success","error","setAuthToken","token","axios","defaults","headers","common","loadUser","a","localStorage","get","res","data","register","name","email","phone","role","province","city","password","access","config","body","JSON","stringify","post","Swal","fire","title","text","icon","confirmButtonColor","confirmButtonText","errors","response","forEach","login","logout","color","getItem","setItem","then","x","require","Boolean","window","location","hostname","match","initialState","isAuthenticated","loading","user","combineReducers","alert","state","action","filter","auth","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Hook","useEffect","App","React","lazy","ReactDOM","render","fallback","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce46b494.chunk.js","sourcesContent":["export const SET_ALERT = \"SET_ALERT\";\r\nexport const REMOVE_ALERT = \"REMOVE_ALERT\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT = \"LOGOUT\";\r\n","/* \r\nMenu Types:\r\n\"menu-default\", \"menu-sub-hidden\", \"menu-hidden\"\r\n*/\r\nexport const defaultMenuType = \"menu\";\r\n\r\nexport const subHiddenBreakpoint = 1440;\r\nexport const menuHiddenBreakpoint = 768;\r\nexport const defaultLocale = \"en\";\r\nexport const localeOptions = [\r\n  { id: \"en\", name: \"English - LTR\", direction: \"ltr\" },\r\n  { id: \"es\", name: \"EspaÃ±ol\", direction: \"ltr\" },\r\n  { id: \"enrtl\", name: \"English - RTL\", direction: \"rtl\" }\r\n];\r\n\r\nexport const searchPath = \"/app/pages/search\";\r\nexport const servicePath = \"https://api.coloredstrategies.com\";\r\n\r\n/* \r\nColor Options:\r\n\"light.purple\", \"light.blue\", \"light.green\", \"light.orange\", \"light.red\", \"dark.purple\", \"dark.blue\", \"dark.green\", \"dark.orange\", \"dark.red\"\r\n*/\r\nexport const themeColorStorageKey=\"__theme_color\"\r\nexport const isMultiColorActive = true;\r\nexport const isDarkSwitchActive = true;\r\nexport const defaultColor = \"light.purple\";\r\nexport const defaultDirection = \"ltr\";\r\nexport const themeRadiusStorageKey = \"__theme_radius\";\r\nexport const isDemo = true;","import { toast } from \"react-toastify\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { SET_ALERT, REMOVE_ALERT } from \"./types\";\r\n\r\nexport const setAlert = (msg, alertType) => (dispatch) => {\r\n  const id = uuidv4();\r\n  dispatch({\r\n    type: SET_ALERT,\r\n    payload: { msg, alertType, id },\r\n  });\r\n  if(alertType === \"success\")\r\n  {\r\n    toast.success(msg);\r\n  }\r\n  else if (alertType === \"danger\")\r\n  {\r\n    toast.error(msg);\r\n  }\r\n  else\r\n  {\r\n    toast(msg);\r\n  }\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"x-auth-token\"] = token;\r\n  } else {\r\n    delete axios.defaults.headers.common[\"x-auth-token\"];\r\n  }\r\n};\r\nexport default setAuthToken;\r\n","import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from \"./types\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport Swal from \"sweetalert2\";\r\n\r\n//LOAD USER\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get(\"http://localhost:5000/api/auth\");\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n//REGISTER USER\r\nexport const register =\r\n  ({ name, email, phone, role, province, city, password, access }) =>\r\n  async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    if (\r\n      role === \"Manufacturer\" ||\r\n      role === \"Retailer\" ||\r\n      role === \"PRO\" ||\r\n      role === \"Recycling Depot\" ||\r\n      role === \"DEFF\"\r\n    ) {\r\n      access = \"Pending\";\r\n    } else {\r\n      access = \"n/a\";\r\n    }\r\n\r\n    const body = JSON.stringify({\r\n      name,\r\n      email,\r\n      phone,\r\n      role,\r\n      province,\r\n      city,\r\n      password,\r\n      access,\r\n    });\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        \"http://localhost:5000/api/user\",\r\n        body,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      Swal.fire({\r\n        title: \"Register Successful\",\r\n        text: \"You are all set! If you are a Manufacturer/Recycling Depot/Retailer or PRO, we will get back to you as soon as your registration is approved!\",\r\n        icon: \"success\",\r\n        confirmButtonColor: \"#6fb327\",\r\n        confirmButtonText: \"Alright!\",\r\n      });\r\n      //dispatch(loadUser());\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n      }\r\n\r\n      dispatch({ type: REGISTER_FAIL });\r\n    }\r\n  };\r\n\r\n//LOGIN USER\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({\r\n    email,\r\n    password,\r\n  });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:5000/api/auth\",\r\n      body,\r\n      config\r\n    );\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser());\r\n    dispatch(setAlert(\"Logged in successfully\", \"success\"));\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({ type: LOGIN_FAIL });\r\n  }\r\n};\r\n\r\n//LOGOUT\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n  dispatch(setAlert(\"Logged out successfully\", \"success\"));\r\n};\r\n","import \"./assets/css/vendor/bootstrap.min.css\";\r\nimport \"./assets/css/vendor/bootstrap.rtl.only.min.css\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport \"react-table/react-table.css\";\r\nimport 'react-image-lightbox/style.css';\r\nimport \"video.js/dist/video-js.css\";\r\n\r\n\r\nimport { isMultiColorActive, defaultColor,themeColorStorageKey,isDarkSwitchActive } from \"./constants/defaultValues\";\r\nconst color =\r\n  (isMultiColorActive||isDarkSwitchActive ) && localStorage.getItem(themeColorStorageKey)\r\n    ? localStorage.getItem(themeColorStorageKey)\r\n    : defaultColor;\r\n\r\nlocalStorage.setItem(themeColorStorageKey, color);\r\nlet render = () => { \r\n  // import('./assets/css/sass/themes/gogo.' + color + '.scss').then(x => {\r\n  import('./assets/css/sass/themes/gogo.light.green.scss').then(x => {\r\n     require('./AppRenderer');\r\n  });\r\n};\r\nrender();","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SET_ALERT, REMOVE_ALERT } from \"../../actions/types\";\r\nconst initialState = [];\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_ALERT:\r\n      return [...state, payload];\r\n    case REMOVE_ALERT:\r\n      return state.filter((alert) => alert.id !== payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from \"../../actions/types\";\r\n\r\nconst initialState = {\r\n  token: localStorage.getItem(\"token\"),\r\n  isAuthenticated: null,\r\n  loading: true,\r\n  user: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case USER_LOADED:\r\n      return { ...state, isAuthenticated: true, loading: false, user: payload };\r\n    case REGISTER_SUCCESS:\r\n      localStorage.setItem(\"token\", payload.token);\r\n      return { ...state, ...payload, loading: false, isAuthenticated: false };\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem(\"token\", payload.token);\r\n      return { ...state, ...payload, loading: false };\r\n    case REGISTER_FAIL:\r\n      localStorage.removeItem(\"token\");\r\n      return { ...state, token: null, isAuthenticated: false, loading: false };\r\n    case AUTH_ERROR:\r\n      localStorage.removeItem(\"token\");\r\n      return { ...state, token: null, isAuthenticated: false, loading: false };\r\n    case LOGIN_FAIL:\r\n      localStorage.removeItem(\"token\");\r\n      return { ...state, token: null, isAuthenticated: false, loading: false };\r\n    case LOGOUT:\r\n      localStorage.removeItem(\"token\");\r\n      return { ...state, token: null, isAuthenticated: false, loading: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport alert from \"./alert\";\r\nimport auth from \"./auth\";\r\n\r\nexport default combineReducers({\r\n  alert,\r\n  auth,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import { useEffect } from \"react\";\r\nimport store from \"../redux/store\";\r\nimport { loadUser } from \"../actions/auth\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\nif (localStorage.token) {\r\n  setAuthToken(localStorage.token);\r\n}\r\n\r\nconst Hook = () => {\r\n  useEffect(() => {\r\n    store.dispatch(loadUser());\r\n  }, []);\r\n  return null;\r\n};\r\n\r\nexport default Hook;\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n//Alerts for errors or success messages\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n//REDUX\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport Hook from \"./layout/useEffectHook\";\r\n\r\nconst App = React.lazy(() => import(/* webpackChunkName: \"App\" */ \"./App\"));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Hook />\r\n    <Suspense fallback={<div className=\"loading\" />}>\r\n    <ToastContainer />\r\n      <App />\r\n    </Suspense>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n/*\r\n * If you want your app to work offline and load faster, you can change\r\n * unregister() to register() below. Note this comes with some pitfalls.\r\n * Learn more about service workers: https://bit.ly/CRA-PWA\r\n */\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}